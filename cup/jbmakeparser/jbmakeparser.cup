import com.jetbrains.jbmake.parser.ast.*;
import java.util.List;
import java.util.LinkedList;


parser code {:
    private static com.jetbrains.jbmake.parser.ast.Location toLocation(java_cup.runtime.ComplexSymbolFactory.Location l) {
        return new com.jetbrains.jbmake.parser.ast.Location(l.getLine(), l.getColumn());
    }
:}

//------ Terminals

terminal COLON;
terminal LINE_TERMINATOR;
terminal RECIPE_PREFIX;
terminal WHITESPACE;
terminal SPACE;
terminal LINE_CONTINUATION;
terminal String OTHER;

//------ Non terminals

non terminal Makefile               makefile;
non terminal List<Rule>             rule_list;
non terminal Rule                   rule;

non terminal Target                 target;

non terminal TargetId               target_id;

non terminal List<Dependency>       dependency_list;
non terminal Dependency             dependencyName;

non terminal Command                command;
//------ Rules

makefile                ::= rule_list:ll
                            {: RESULT = new Makefile(ll); :}
                        ;

rule_list               ::= rule:r
                            {: RESULT = new LinkedList<Rule>(); RESULT.add(0, r); :}
                        | rule:r rule_list:rl
                            {: if (r != null) rl.add(0, r); RESULT = rl; :}
                        ;

// todo better error recovery
// todo variable declarations
// todo implicit rule support
// todo line continuation support
// todo full comment support

rule                    ::= target:t LINE_TERMINATOR
                            {: RESULT = new Rule(t); :}
                        | target:t LINE_TERMINATOR command:c
                            {: RESULT = new Rule(t, c); :}
                        | error LINE_TERMINATOR
                        ;

target                  ::= target_id:ti COLON:c
                            {: RESULT = new Target(ti, toLocation(cxleft)); :}
                        | target_id:ti COLON:c SPACE dependency_list:dl
                            {: RESULT = new Target(ti, dl, toLocation(cxleft)); :}
                        ;

target_id               ::= OTHER:target_id_value
                            {: RESULT = new TargetId(toLocation(target_id_valuexleft), target_id_value, toLocation(target_id_valuexright)); :}
                        | OTHER:target_id_value SPACE
                            {: RESULT = new TargetId(toLocation(target_id_valuexleft), target_id_value, toLocation(target_id_valuexright)); :}
                        ;

dependency_list         ::= dependencyName:d SPACE dependency_list:dl
                            {: dl.add(0, d); RESULT = dl; :}
                        | dependencyName:d
                            {: RESULT = new LinkedList<Dependency>(); RESULT.add(0, d); :}
                        ;

dependencyName              ::= OTHER:dependency_value
                            {: RESULT = new Dependency(toLocation(dependency_valuexleft), dependency_value, toLocation(dependency_valuexright)); :}
                        ;

command                 ::= RECIPE_PREFIX OTHER:command_value LINE_TERMINATOR
                            {: RESULT = new Command(toLocation(command_valuexleft), command_value, toLocation(command_valuexright)); :}
                        ;
